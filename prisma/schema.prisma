// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(CUSTOMER)
  
  orders         Order[]
  reservations   Reservation[]
  addresses      Address[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model MenuItem {
  id          Int   @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  isVeg       Boolean  @default(false)
  isPopular   Boolean  @default(false)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems  OrderItem[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id              Int      @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Float
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  deliveryAddress Address?    @relation(fields: [addressId], references: [id])
  addressId       String?
  specialInstructions String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Address {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  isDefault    Boolean @default(false)
  orders       Order[]
}

model Reservation {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  time        String
  partySize   Int
  status      ReservationStatus @default(PENDING)
  specialRequests String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}